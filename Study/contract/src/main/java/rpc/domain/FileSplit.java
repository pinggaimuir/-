/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package rpc.domain;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FileSplit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FileSplit\",\"namespace\":\"rpc.domain\",\"fields\":[{\"name\":\"path\",\"type\":[\"string\",\"null\"]},{\"name\":\"start\",\"type\":[\"long\",\"null\"]},{\"name\":\"length\",\"type\":[\"long\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence path;
  @Deprecated public java.lang.Long start;
  @Deprecated public java.lang.Long length;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public FileSplit() {}

  /**
   * All-args constructor.
   */
  public FileSplit(java.lang.CharSequence path, java.lang.Long start, java.lang.Long length) {
    this.path = path;
    this.start = start;
    this.length = length;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return path;
    case 1: return start;
    case 2: return length;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: path = (java.lang.CharSequence)value$; break;
    case 1: start = (java.lang.Long)value$; break;
    case 2: length = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'path' field.
   */
  public java.lang.CharSequence getPath() {
    return path;
  }

  /**
   * Sets the value of the 'path' field.
   * @param value the value to set.
   */
  public void setPath(java.lang.CharSequence value) {
    this.path = value;
  }

  /**
   * Gets the value of the 'start' field.
   */
  public java.lang.Long getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.Long value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'length' field.
   */
  public java.lang.Long getLength() {
    return length;
  }

  /**
   * Sets the value of the 'length' field.
   * @param value the value to set.
   */
  public void setLength(java.lang.Long value) {
    this.length = value;
  }

  /** Creates a new FileSplit RecordBuilder */
  public static rpc.domain.FileSplit.Builder newBuilder() {
    return new rpc.domain.FileSplit.Builder();
  }
  
  /** Creates a new FileSplit RecordBuilder by copying an existing Builder */
  public static rpc.domain.FileSplit.Builder newBuilder(rpc.domain.FileSplit.Builder other) {
    return new rpc.domain.FileSplit.Builder(other);
  }
  
  /** Creates a new FileSplit RecordBuilder by copying an existing FileSplit instance */
  public static rpc.domain.FileSplit.Builder newBuilder(rpc.domain.FileSplit other) {
    return new rpc.domain.FileSplit.Builder(other);
  }
  
  /**
   * RecordBuilder for FileSplit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FileSplit>
    implements org.apache.avro.data.RecordBuilder<FileSplit> {

    private java.lang.CharSequence path;
    private java.lang.Long start;
    private java.lang.Long length;

    /** Creates a new Builder */
    private Builder() {
      super(rpc.domain.FileSplit.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(rpc.domain.FileSplit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.path)) {
        this.path = data().deepCopy(fields()[0].schema(), other.path);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.start)) {
        this.start = data().deepCopy(fields()[1].schema(), other.start);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.length)) {
        this.length = data().deepCopy(fields()[2].schema(), other.length);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FileSplit instance */
    private Builder(rpc.domain.FileSplit other) {
            super(rpc.domain.FileSplit.SCHEMA$);
      if (isValidValue(fields()[0], other.path)) {
        this.path = data().deepCopy(fields()[0].schema(), other.path);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.start)) {
        this.start = data().deepCopy(fields()[1].schema(), other.start);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.length)) {
        this.length = data().deepCopy(fields()[2].schema(), other.length);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'path' field */
    public java.lang.CharSequence getPath() {
      return path;
    }
    
    /** Sets the value of the 'path' field */
    public rpc.domain.FileSplit.Builder setPath(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.path = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'path' field has been set */
    public boolean hasPath() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'path' field */
    public rpc.domain.FileSplit.Builder clearPath() {
      path = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.Long getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public rpc.domain.FileSplit.Builder setStart(java.lang.Long value) {
      validate(fields()[1], value);
      this.start = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'start' field */
    public rpc.domain.FileSplit.Builder clearStart() {
      start = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'length' field */
    public java.lang.Long getLength() {
      return length;
    }
    
    /** Sets the value of the 'length' field */
    public rpc.domain.FileSplit.Builder setLength(java.lang.Long value) {
      validate(fields()[2], value);
      this.length = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'length' field has been set */
    public boolean hasLength() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'length' field */
    public rpc.domain.FileSplit.Builder clearLength() {
      length = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public FileSplit build() {
      try {
        FileSplit record = new FileSplit();
        record.path = fieldSetFlags()[0] ? this.path : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.start = fieldSetFlags()[1] ? this.start : (java.lang.Long) defaultValue(fields()[1]);
        record.length = fieldSetFlags()[2] ? this.length : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
