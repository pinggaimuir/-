package com.bric.crawler.download;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Date;
import java.util.Map;
import org.apache.log4j.Logger;
import org.htmlparser.Parser;
import org.htmlparser.filters.AndFilter;
import org.htmlparser.filters.HasAttributeFilter;
import org.htmlparser.filters.TagNameFilter;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.ParserException;
import com.bric.crawler.MapInit;
import com.bric.intoDB.Price21foodDao;
import com.bric.temporary.Query21foodPrice;
import com.bric.util.Constants;
import com.bric.util.DateTimeUtil;
import com.bric.util.FileStrIO;
import com.bric.util.HtmlNodeListUtil;
import com.bric.util.MyHttpClient;
import com.bric.util.ProxyManagerUtil;

public class Price21foodDataFetch {

	private static String MarketsUrl ="http://www.21food.cn/news/price.jsp?product=";
	private Logger logger = Logger.getLogger(Price21foodDataFetch.class);
	private ProxyManagerUtil proxyManagerUtil = new ProxyManagerUtil();
	private MyHttpClient myHttpClient = new MyHttpClient();

	public Parser getHTMLParser(String pageURL, String encoding) { 
		System.out.println("尝试下载页面："+pageURL);
		Parser parser;
		int i=0;
		while(true){
			try{ 
				//利用HttpClient得到页面内容
				String proxyStr = proxyManagerUtil.getProxyStr();
				String htmlContent = myHttpClient.getHtmlByHttpClient(pageURL, encoding, proxyStr);
				if(htmlContent.equals("0")){
					return null;
				}
				if("123".contains(htmlContent)){
					proxyManagerUtil.changeProxy();
					continue;
				}
				parser = Parser.createParser(htmlContent, encoding); 
				System.out.println("下载完成");
				return parser;
			}catch(Exception e){
				i++;
				if(i>50){
					System.out.println("代理已经换了n个了，还是不行，退出");
					return null;
				}
				System.out.println("其他错误");
				e.printStackTrace();				
				proxyManagerUtil.changeProxy();
			}
		}
	}	
	
	private String getMarketPriceAsStr(String varName,Date date){
		Parser parser = new Parser();
		NodeList tableList;
		try {
			String url = MarketsUrl+URLEncoder.encode(varName, "gbk")+"&sourcedate="+DateTimeUtil.formatDate(date, "yyyy-MM-dd");
			System.out.println(url);
			parser = getHTMLParser(url,"gbk");
			if(parser == null){
				logger.error("抓取 "+varName+" 时出错。");
				return null;
			}
			TagNameFilter tableFilter = new TagNameFilter("table");
			HasAttributeFilter classFilter = new HasAttributeFilter("class","price-tab");
			AndFilter andFilter = new AndFilter(tableFilter, classFilter);
			NodeList nodes = parser.extractAllNodesThatMatch(andFilter);
			if(nodes.size() != 0){
				tableList = nodes.elementAt(0).getChildren();
			}else{
				logger.error("未找到过滤节点");
				return null;
			}
			return HtmlNodeListUtil.table2Str_SpecifyRowsCols(tableList, "0", "11111100");
		} catch (ParserException e) {
			logger.error("ParserException while fetching "+varName+":", e);
		} catch (UnsupportedEncodingException e) {
			logger.error("UnsupportedEncodingException "+varName+":", e);
		} catch (NullPointerException e) {
			e.printStackTrace();
			logger.error("error kind:"+varName);
		}
		return null;
	}

	public void fetchData(Date date ){
		String dateStr = DateTimeUtil.formatDate(date, "yyyyMMdd");
		logger.info("**********fetch start, date "+dateStr+"*********");
		for(String kind:MapInit.nameReflectMap21food.keySet()){
			Map<String, Integer> innerMap = MapInit.nameReflectMap21food.get(kind);
			
			for (String varName : innerMap.keySet()) {
				try {
					logger.info(varName+ " .sleep 10 seconds ...");
					Thread.sleep(10000);
				} catch (InterruptedException e) {
					logger.error("InterruptedException:", e);
				}
				String content = getMarketPriceAsStr(varName,date);
				if(content == null){
					logger.error("跳过保存： "+varName);
					continue;
				}
//				String dirString = Constants.MARKETPRICEDATA_21FOOD_ROOT + "\\" + kind + "\\" + varName + "\\";//windows
				String dirString = Constants.MARKETPRICEDATA_21FOOD_ROOT 
						+ Constants.FILE_SEPARATOR + kind 
						+ Constants.FILE_SEPARATOR + varName 
						+ Constants.FILE_SEPARATOR;//linux
				try {
					if (new File(dirString + dateStr + ".txt").exists())
						logger.warn("Overwrite: "+ varName);
					FileStrIO.saveStringToFile(content, dirString,	dateStr + ".txt");
					logger.info("data saved: " + varName);
				} catch (IOException e) {
					logger.error("IOException while saving "+varName+" data:", e);
				}
			}
			logger.info("====== "+ kind + " fetched ======");
			
			try {
				logger.info("sleep one minute...");
				Thread.sleep(20000);
			} catch (InterruptedException e) {
				logger.error("InterruptedException:", e);
			}
			logger.info("continue fetch...");
		}
		logger.info("******fetch succeed!******");
	}
	
	public static void main(String[] a){		
		Price21foodDataFetch fetch = new Price21foodDataFetch();
		String[] dates = {"20151201","20151130","20151129","20151128","20151127","20151126","20151125"};
		for(String dateStr:dates){
			fetch.fetchData(DateTimeUtil.parseDateTime(dateStr, "yyyyMMdd"));
			new Price21foodDao().save21foodPriceData(new File(Constants.MARKETPRICEDATA_21FOOD_ROOT), dateStr);
			Query21foodPrice.loadAreaAndPrice(dateStr);	
		}
	}

}
