/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package rpc.domain;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HttpAppHost extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HttpAppHost\",\"namespace\":\"rpc.domain\",\"fields\":[{\"name\":\"reportTime\",\"type\":[\"string\",\"null\"]},{\"name\":\"cellid\",\"type\":[\"string\",\"null\"]},{\"name\":\"appType\",\"type\":[\"int\",\"null\"]},{\"name\":\"appSubtype\",\"type\":[\"int\",\"null\"]},{\"name\":\"userIP\",\"type\":[\"string\",\"null\"]},{\"name\":\"userPort\",\"type\":[\"int\",\"null\"]},{\"name\":\"appServerIP\",\"type\":[\"string\",\"null\"]},{\"name\":\"appServerPort\",\"type\":[\"int\",\"null\"]},{\"name\":\"host\",\"type\":[\"string\",\"null\"]},{\"name\":\"attempts\",\"type\":[\"int\",\"null\"]},{\"name\":\"accepts\",\"type\":[\"int\",\"null\"]},{\"name\":\"trafficUL\",\"type\":[\"long\",\"null\"]},{\"name\":\"trafficDL\",\"type\":[\"long\",\"null\"]},{\"name\":\"retranUL\",\"type\":[\"long\",\"null\"]},{\"name\":\"retranDL\",\"type\":[\"long\",\"null\"]},{\"name\":\"transDelay\",\"type\":[\"long\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence reportTime;
  @Deprecated public java.lang.CharSequence cellid;
  @Deprecated public java.lang.Integer appType;
  @Deprecated public java.lang.Integer appSubtype;
  @Deprecated public java.lang.CharSequence userIP;
  @Deprecated public java.lang.Integer userPort;
  @Deprecated public java.lang.CharSequence appServerIP;
  @Deprecated public java.lang.Integer appServerPort;
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public java.lang.Integer attempts;
  @Deprecated public java.lang.Integer accepts;
  @Deprecated public java.lang.Long trafficUL;
  @Deprecated public java.lang.Long trafficDL;
  @Deprecated public java.lang.Long retranUL;
  @Deprecated public java.lang.Long retranDL;
  @Deprecated public java.lang.Long transDelay;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public HttpAppHost() {}

  /**
   * All-args constructor.
   */
  public HttpAppHost(java.lang.CharSequence reportTime, java.lang.CharSequence cellid, java.lang.Integer appType, java.lang.Integer appSubtype, java.lang.CharSequence userIP, java.lang.Integer userPort, java.lang.CharSequence appServerIP, java.lang.Integer appServerPort, java.lang.CharSequence host, java.lang.Integer attempts, java.lang.Integer accepts, java.lang.Long trafficUL, java.lang.Long trafficDL, java.lang.Long retranUL, java.lang.Long retranDL, java.lang.Long transDelay) {
    this.reportTime = reportTime;
    this.cellid = cellid;
    this.appType = appType;
    this.appSubtype = appSubtype;
    this.userIP = userIP;
    this.userPort = userPort;
    this.appServerIP = appServerIP;
    this.appServerPort = appServerPort;
    this.host = host;
    this.attempts = attempts;
    this.accepts = accepts;
    this.trafficUL = trafficUL;
    this.trafficDL = trafficDL;
    this.retranUL = retranUL;
    this.retranDL = retranDL;
    this.transDelay = transDelay;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return reportTime;
    case 1: return cellid;
    case 2: return appType;
    case 3: return appSubtype;
    case 4: return userIP;
    case 5: return userPort;
    case 6: return appServerIP;
    case 7: return appServerPort;
    case 8: return host;
    case 9: return attempts;
    case 10: return accepts;
    case 11: return trafficUL;
    case 12: return trafficDL;
    case 13: return retranUL;
    case 14: return retranDL;
    case 15: return transDelay;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: reportTime = (java.lang.CharSequence)value$; break;
    case 1: cellid = (java.lang.CharSequence)value$; break;
    case 2: appType = (java.lang.Integer)value$; break;
    case 3: appSubtype = (java.lang.Integer)value$; break;
    case 4: userIP = (java.lang.CharSequence)value$; break;
    case 5: userPort = (java.lang.Integer)value$; break;
    case 6: appServerIP = (java.lang.CharSequence)value$; break;
    case 7: appServerPort = (java.lang.Integer)value$; break;
    case 8: host = (java.lang.CharSequence)value$; break;
    case 9: attempts = (java.lang.Integer)value$; break;
    case 10: accepts = (java.lang.Integer)value$; break;
    case 11: trafficUL = (java.lang.Long)value$; break;
    case 12: trafficDL = (java.lang.Long)value$; break;
    case 13: retranUL = (java.lang.Long)value$; break;
    case 14: retranDL = (java.lang.Long)value$; break;
    case 15: transDelay = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'reportTime' field.
   */
  public java.lang.CharSequence getReportTime() {
    return reportTime;
  }

  /**
   * Sets the value of the 'reportTime' field.
   * @param value the value to set.
   */
  public void setReportTime(java.lang.CharSequence value) {
    this.reportTime = value;
  }

  /**
   * Gets the value of the 'cellid' field.
   */
  public java.lang.CharSequence getCellid() {
    return cellid;
  }

  /**
   * Sets the value of the 'cellid' field.
   * @param value the value to set.
   */
  public void setCellid(java.lang.CharSequence value) {
    this.cellid = value;
  }

  /**
   * Gets the value of the 'appType' field.
   */
  public java.lang.Integer getAppType() {
    return appType;
  }

  /**
   * Sets the value of the 'appType' field.
   * @param value the value to set.
   */
  public void setAppType(java.lang.Integer value) {
    this.appType = value;
  }

  /**
   * Gets the value of the 'appSubtype' field.
   */
  public java.lang.Integer getAppSubtype() {
    return appSubtype;
  }

  /**
   * Sets the value of the 'appSubtype' field.
   * @param value the value to set.
   */
  public void setAppSubtype(java.lang.Integer value) {
    this.appSubtype = value;
  }

  /**
   * Gets the value of the 'userIP' field.
   */
  public java.lang.CharSequence getUserIP() {
    return userIP;
  }

  /**
   * Sets the value of the 'userIP' field.
   * @param value the value to set.
   */
  public void setUserIP(java.lang.CharSequence value) {
    this.userIP = value;
  }

  /**
   * Gets the value of the 'userPort' field.
   */
  public java.lang.Integer getUserPort() {
    return userPort;
  }

  /**
   * Sets the value of the 'userPort' field.
   * @param value the value to set.
   */
  public void setUserPort(java.lang.Integer value) {
    this.userPort = value;
  }

  /**
   * Gets the value of the 'appServerIP' field.
   */
  public java.lang.CharSequence getAppServerIP() {
    return appServerIP;
  }

  /**
   * Sets the value of the 'appServerIP' field.
   * @param value the value to set.
   */
  public void setAppServerIP(java.lang.CharSequence value) {
    this.appServerIP = value;
  }

  /**
   * Gets the value of the 'appServerPort' field.
   */
  public java.lang.Integer getAppServerPort() {
    return appServerPort;
  }

  /**
   * Sets the value of the 'appServerPort' field.
   * @param value the value to set.
   */
  public void setAppServerPort(java.lang.Integer value) {
    this.appServerPort = value;
  }

  /**
   * Gets the value of the 'host' field.
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'attempts' field.
   */
  public java.lang.Integer getAttempts() {
    return attempts;
  }

  /**
   * Sets the value of the 'attempts' field.
   * @param value the value to set.
   */
  public void setAttempts(java.lang.Integer value) {
    this.attempts = value;
  }

  /**
   * Gets the value of the 'accepts' field.
   */
  public java.lang.Integer getAccepts() {
    return accepts;
  }

  /**
   * Sets the value of the 'accepts' field.
   * @param value the value to set.
   */
  public void setAccepts(java.lang.Integer value) {
    this.accepts = value;
  }

  /**
   * Gets the value of the 'trafficUL' field.
   */
  public java.lang.Long getTrafficUL() {
    return trafficUL;
  }

  /**
   * Sets the value of the 'trafficUL' field.
   * @param value the value to set.
   */
  public void setTrafficUL(java.lang.Long value) {
    this.trafficUL = value;
  }

  /**
   * Gets the value of the 'trafficDL' field.
   */
  public java.lang.Long getTrafficDL() {
    return trafficDL;
  }

  /**
   * Sets the value of the 'trafficDL' field.
   * @param value the value to set.
   */
  public void setTrafficDL(java.lang.Long value) {
    this.trafficDL = value;
  }

  /**
   * Gets the value of the 'retranUL' field.
   */
  public java.lang.Long getRetranUL() {
    return retranUL;
  }

  /**
   * Sets the value of the 'retranUL' field.
   * @param value the value to set.
   */
  public void setRetranUL(java.lang.Long value) {
    this.retranUL = value;
  }

  /**
   * Gets the value of the 'retranDL' field.
   */
  public java.lang.Long getRetranDL() {
    return retranDL;
  }

  /**
   * Sets the value of the 'retranDL' field.
   * @param value the value to set.
   */
  public void setRetranDL(java.lang.Long value) {
    this.retranDL = value;
  }

  /**
   * Gets the value of the 'transDelay' field.
   */
  public java.lang.Long getTransDelay() {
    return transDelay;
  }

  /**
   * Sets the value of the 'transDelay' field.
   * @param value the value to set.
   */
  public void setTransDelay(java.lang.Long value) {
    this.transDelay = value;
  }

  /** Creates a new HttpAppHost RecordBuilder */
  public static rpc.domain.HttpAppHost.Builder newBuilder() {
    return new rpc.domain.HttpAppHost.Builder();
  }
  
  /** Creates a new HttpAppHost RecordBuilder by copying an existing Builder */
  public static rpc.domain.HttpAppHost.Builder newBuilder(rpc.domain.HttpAppHost.Builder other) {
    return new rpc.domain.HttpAppHost.Builder(other);
  }
  
  /** Creates a new HttpAppHost RecordBuilder by copying an existing HttpAppHost instance */
  public static rpc.domain.HttpAppHost.Builder newBuilder(rpc.domain.HttpAppHost other) {
    return new rpc.domain.HttpAppHost.Builder(other);
  }
  
  /**
   * RecordBuilder for HttpAppHost instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HttpAppHost>
    implements org.apache.avro.data.RecordBuilder<HttpAppHost> {

    private java.lang.CharSequence reportTime;
    private java.lang.CharSequence cellid;
    private java.lang.Integer appType;
    private java.lang.Integer appSubtype;
    private java.lang.CharSequence userIP;
    private java.lang.Integer userPort;
    private java.lang.CharSequence appServerIP;
    private java.lang.Integer appServerPort;
    private java.lang.CharSequence host;
    private java.lang.Integer attempts;
    private java.lang.Integer accepts;
    private java.lang.Long trafficUL;
    private java.lang.Long trafficDL;
    private java.lang.Long retranUL;
    private java.lang.Long retranDL;
    private java.lang.Long transDelay;

    /** Creates a new Builder */
    private Builder() {
      super(rpc.domain.HttpAppHost.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(rpc.domain.HttpAppHost.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.reportTime)) {
        this.reportTime = data().deepCopy(fields()[0].schema(), other.reportTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cellid)) {
        this.cellid = data().deepCopy(fields()[1].schema(), other.cellid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.appType)) {
        this.appType = data().deepCopy(fields()[2].schema(), other.appType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.appSubtype)) {
        this.appSubtype = data().deepCopy(fields()[3].schema(), other.appSubtype);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userIP)) {
        this.userIP = data().deepCopy(fields()[4].schema(), other.userIP);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.userPort)) {
        this.userPort = data().deepCopy(fields()[5].schema(), other.userPort);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.appServerIP)) {
        this.appServerIP = data().deepCopy(fields()[6].schema(), other.appServerIP);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.appServerPort)) {
        this.appServerPort = data().deepCopy(fields()[7].schema(), other.appServerPort);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.host)) {
        this.host = data().deepCopy(fields()[8].schema(), other.host);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.attempts)) {
        this.attempts = data().deepCopy(fields()[9].schema(), other.attempts);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.accepts)) {
        this.accepts = data().deepCopy(fields()[10].schema(), other.accepts);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.trafficUL)) {
        this.trafficUL = data().deepCopy(fields()[11].schema(), other.trafficUL);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.trafficDL)) {
        this.trafficDL = data().deepCopy(fields()[12].schema(), other.trafficDL);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.retranUL)) {
        this.retranUL = data().deepCopy(fields()[13].schema(), other.retranUL);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.retranDL)) {
        this.retranDL = data().deepCopy(fields()[14].schema(), other.retranDL);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.transDelay)) {
        this.transDelay = data().deepCopy(fields()[15].schema(), other.transDelay);
        fieldSetFlags()[15] = true;
      }
    }
    
    /** Creates a Builder by copying an existing HttpAppHost instance */
    private Builder(rpc.domain.HttpAppHost other) {
            super(rpc.domain.HttpAppHost.SCHEMA$);
      if (isValidValue(fields()[0], other.reportTime)) {
        this.reportTime = data().deepCopy(fields()[0].schema(), other.reportTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cellid)) {
        this.cellid = data().deepCopy(fields()[1].schema(), other.cellid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.appType)) {
        this.appType = data().deepCopy(fields()[2].schema(), other.appType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.appSubtype)) {
        this.appSubtype = data().deepCopy(fields()[3].schema(), other.appSubtype);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userIP)) {
        this.userIP = data().deepCopy(fields()[4].schema(), other.userIP);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.userPort)) {
        this.userPort = data().deepCopy(fields()[5].schema(), other.userPort);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.appServerIP)) {
        this.appServerIP = data().deepCopy(fields()[6].schema(), other.appServerIP);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.appServerPort)) {
        this.appServerPort = data().deepCopy(fields()[7].schema(), other.appServerPort);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.host)) {
        this.host = data().deepCopy(fields()[8].schema(), other.host);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.attempts)) {
        this.attempts = data().deepCopy(fields()[9].schema(), other.attempts);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.accepts)) {
        this.accepts = data().deepCopy(fields()[10].schema(), other.accepts);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.trafficUL)) {
        this.trafficUL = data().deepCopy(fields()[11].schema(), other.trafficUL);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.trafficDL)) {
        this.trafficDL = data().deepCopy(fields()[12].schema(), other.trafficDL);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.retranUL)) {
        this.retranUL = data().deepCopy(fields()[13].schema(), other.retranUL);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.retranDL)) {
        this.retranDL = data().deepCopy(fields()[14].schema(), other.retranDL);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.transDelay)) {
        this.transDelay = data().deepCopy(fields()[15].schema(), other.transDelay);
        fieldSetFlags()[15] = true;
      }
    }

    /** Gets the value of the 'reportTime' field */
    public java.lang.CharSequence getReportTime() {
      return reportTime;
    }
    
    /** Sets the value of the 'reportTime' field */
    public rpc.domain.HttpAppHost.Builder setReportTime(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.reportTime = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'reportTime' field has been set */
    public boolean hasReportTime() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'reportTime' field */
    public rpc.domain.HttpAppHost.Builder clearReportTime() {
      reportTime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'cellid' field */
    public java.lang.CharSequence getCellid() {
      return cellid;
    }
    
    /** Sets the value of the 'cellid' field */
    public rpc.domain.HttpAppHost.Builder setCellid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.cellid = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'cellid' field has been set */
    public boolean hasCellid() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'cellid' field */
    public rpc.domain.HttpAppHost.Builder clearCellid() {
      cellid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'appType' field */
    public java.lang.Integer getAppType() {
      return appType;
    }
    
    /** Sets the value of the 'appType' field */
    public rpc.domain.HttpAppHost.Builder setAppType(java.lang.Integer value) {
      validate(fields()[2], value);
      this.appType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'appType' field has been set */
    public boolean hasAppType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'appType' field */
    public rpc.domain.HttpAppHost.Builder clearAppType() {
      appType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'appSubtype' field */
    public java.lang.Integer getAppSubtype() {
      return appSubtype;
    }
    
    /** Sets the value of the 'appSubtype' field */
    public rpc.domain.HttpAppHost.Builder setAppSubtype(java.lang.Integer value) {
      validate(fields()[3], value);
      this.appSubtype = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'appSubtype' field has been set */
    public boolean hasAppSubtype() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'appSubtype' field */
    public rpc.domain.HttpAppHost.Builder clearAppSubtype() {
      appSubtype = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'userIP' field */
    public java.lang.CharSequence getUserIP() {
      return userIP;
    }
    
    /** Sets the value of the 'userIP' field */
    public rpc.domain.HttpAppHost.Builder setUserIP(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.userIP = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'userIP' field has been set */
    public boolean hasUserIP() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'userIP' field */
    public rpc.domain.HttpAppHost.Builder clearUserIP() {
      userIP = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'userPort' field */
    public java.lang.Integer getUserPort() {
      return userPort;
    }
    
    /** Sets the value of the 'userPort' field */
    public rpc.domain.HttpAppHost.Builder setUserPort(java.lang.Integer value) {
      validate(fields()[5], value);
      this.userPort = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'userPort' field has been set */
    public boolean hasUserPort() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'userPort' field */
    public rpc.domain.HttpAppHost.Builder clearUserPort() {
      userPort = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'appServerIP' field */
    public java.lang.CharSequence getAppServerIP() {
      return appServerIP;
    }
    
    /** Sets the value of the 'appServerIP' field */
    public rpc.domain.HttpAppHost.Builder setAppServerIP(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.appServerIP = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'appServerIP' field has been set */
    public boolean hasAppServerIP() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'appServerIP' field */
    public rpc.domain.HttpAppHost.Builder clearAppServerIP() {
      appServerIP = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'appServerPort' field */
    public java.lang.Integer getAppServerPort() {
      return appServerPort;
    }
    
    /** Sets the value of the 'appServerPort' field */
    public rpc.domain.HttpAppHost.Builder setAppServerPort(java.lang.Integer value) {
      validate(fields()[7], value);
      this.appServerPort = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'appServerPort' field has been set */
    public boolean hasAppServerPort() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'appServerPort' field */
    public rpc.domain.HttpAppHost.Builder clearAppServerPort() {
      appServerPort = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'host' field */
    public java.lang.CharSequence getHost() {
      return host;
    }
    
    /** Sets the value of the 'host' field */
    public rpc.domain.HttpAppHost.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.host = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'host' field has been set */
    public boolean hasHost() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'host' field */
    public rpc.domain.HttpAppHost.Builder clearHost() {
      host = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'attempts' field */
    public java.lang.Integer getAttempts() {
      return attempts;
    }
    
    /** Sets the value of the 'attempts' field */
    public rpc.domain.HttpAppHost.Builder setAttempts(java.lang.Integer value) {
      validate(fields()[9], value);
      this.attempts = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'attempts' field has been set */
    public boolean hasAttempts() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'attempts' field */
    public rpc.domain.HttpAppHost.Builder clearAttempts() {
      attempts = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'accepts' field */
    public java.lang.Integer getAccepts() {
      return accepts;
    }
    
    /** Sets the value of the 'accepts' field */
    public rpc.domain.HttpAppHost.Builder setAccepts(java.lang.Integer value) {
      validate(fields()[10], value);
      this.accepts = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'accepts' field has been set */
    public boolean hasAccepts() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'accepts' field */
    public rpc.domain.HttpAppHost.Builder clearAccepts() {
      accepts = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'trafficUL' field */
    public java.lang.Long getTrafficUL() {
      return trafficUL;
    }
    
    /** Sets the value of the 'trafficUL' field */
    public rpc.domain.HttpAppHost.Builder setTrafficUL(java.lang.Long value) {
      validate(fields()[11], value);
      this.trafficUL = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'trafficUL' field has been set */
    public boolean hasTrafficUL() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'trafficUL' field */
    public rpc.domain.HttpAppHost.Builder clearTrafficUL() {
      trafficUL = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'trafficDL' field */
    public java.lang.Long getTrafficDL() {
      return trafficDL;
    }
    
    /** Sets the value of the 'trafficDL' field */
    public rpc.domain.HttpAppHost.Builder setTrafficDL(java.lang.Long value) {
      validate(fields()[12], value);
      this.trafficDL = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'trafficDL' field has been set */
    public boolean hasTrafficDL() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'trafficDL' field */
    public rpc.domain.HttpAppHost.Builder clearTrafficDL() {
      trafficDL = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'retranUL' field */
    public java.lang.Long getRetranUL() {
      return retranUL;
    }
    
    /** Sets the value of the 'retranUL' field */
    public rpc.domain.HttpAppHost.Builder setRetranUL(java.lang.Long value) {
      validate(fields()[13], value);
      this.retranUL = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'retranUL' field has been set */
    public boolean hasRetranUL() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'retranUL' field */
    public rpc.domain.HttpAppHost.Builder clearRetranUL() {
      retranUL = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'retranDL' field */
    public java.lang.Long getRetranDL() {
      return retranDL;
    }
    
    /** Sets the value of the 'retranDL' field */
    public rpc.domain.HttpAppHost.Builder setRetranDL(java.lang.Long value) {
      validate(fields()[14], value);
      this.retranDL = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'retranDL' field has been set */
    public boolean hasRetranDL() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'retranDL' field */
    public rpc.domain.HttpAppHost.Builder clearRetranDL() {
      retranDL = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'transDelay' field */
    public java.lang.Long getTransDelay() {
      return transDelay;
    }
    
    /** Sets the value of the 'transDelay' field */
    public rpc.domain.HttpAppHost.Builder setTransDelay(java.lang.Long value) {
      validate(fields()[15], value);
      this.transDelay = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'transDelay' field has been set */
    public boolean hasTransDelay() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'transDelay' field */
    public rpc.domain.HttpAppHost.Builder clearTransDelay() {
      transDelay = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    public HttpAppHost build() {
      try {
        HttpAppHost record = new HttpAppHost();
        record.reportTime = fieldSetFlags()[0] ? this.reportTime : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cellid = fieldSetFlags()[1] ? this.cellid : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.appType = fieldSetFlags()[2] ? this.appType : (java.lang.Integer) defaultValue(fields()[2]);
        record.appSubtype = fieldSetFlags()[3] ? this.appSubtype : (java.lang.Integer) defaultValue(fields()[3]);
        record.userIP = fieldSetFlags()[4] ? this.userIP : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.userPort = fieldSetFlags()[5] ? this.userPort : (java.lang.Integer) defaultValue(fields()[5]);
        record.appServerIP = fieldSetFlags()[6] ? this.appServerIP : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.appServerPort = fieldSetFlags()[7] ? this.appServerPort : (java.lang.Integer) defaultValue(fields()[7]);
        record.host = fieldSetFlags()[8] ? this.host : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.attempts = fieldSetFlags()[9] ? this.attempts : (java.lang.Integer) defaultValue(fields()[9]);
        record.accepts = fieldSetFlags()[10] ? this.accepts : (java.lang.Integer) defaultValue(fields()[10]);
        record.trafficUL = fieldSetFlags()[11] ? this.trafficUL : (java.lang.Long) defaultValue(fields()[11]);
        record.trafficDL = fieldSetFlags()[12] ? this.trafficDL : (java.lang.Long) defaultValue(fields()[12]);
        record.retranUL = fieldSetFlags()[13] ? this.retranUL : (java.lang.Long) defaultValue(fields()[13]);
        record.retranDL = fieldSetFlags()[14] ? this.retranDL : (java.lang.Long) defaultValue(fields()[14]);
        record.transDelay = fieldSetFlags()[15] ? this.transDelay : (java.lang.Long) defaultValue(fields()[15]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
